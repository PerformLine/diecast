[
  {
    "Name": "String Functions",
    "Description": "Used to modify strings in various ways. Whitespace trimming, substring and concatenation, conversion, and find \u0026 replace functions can all be found here.",
    "Functions": [
      {
        "Name": "contains",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return true of the given string contains another string.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "input",
            "Type": "string",
            "Description": "The string to search within.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "substring",
            "Type": "string",
            "Description": "The substring to find in the input string.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "contains \"Alice met Bob at the store.\" \"store\"",
            "Description": "",
            "Return": "true"
          }
        ]
      },
      {
        "Name": "lower",
        "Alias": "",
        "Aliases": null,
        "Summary": "Reformat the given string by changing it into lower case capitalization.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "in",
            "Type": "string",
            "Description": "The input string to reformat.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "lower \"This is a thing\"",
            "Description": "",
            "Return": "this is a thing"
          }
        ]
      },
      {
        "Name": "ltrim",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the given string with any leading whitespace removed.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "in",
            "Type": "string",
            "Description": "The input string to trim.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "trim \" Hello   World  \"",
            "Description": "",
            "Return": "Hello  World  "
          }
        ]
      },
      {
        "Name": "replace",
        "Alias": "",
        "Aliases": null,
        "Summary": "Replace occurrences of one substring with another string in a given input string.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "wholestring",
            "Type": "string",
            "Description": "The whole string being searched.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "old",
            "Type": "string",
            "Description": "The old value being sought.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "new",
            "Type": "string",
            "Description": "The new value that is replacing old.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "count",
            "Type": "integer",
            "Description": "The number of matches to replace before stopping. If this number is \u003c 0, the all occurrences will be replaced.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "replace \"oink oink oink\" \"oink\" \"moo\" -1",
            "Description": "",
            "Return": "moo moo moo"
          },
          {
            "Code": "replace \"cheese\" \"e\" \"o\" 2",
            "Description": "",
            "Return": "choose"
          }
        ]
      },
      {
        "Name": "rxreplace",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the given string with all substrings matching the given regular expression replaced with another string.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "wholestring",
            "Type": "string",
            "Description": "The whole string being searched.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "pattern",
            "Type": "string",
            "Description": "A Golang-compatible regular expression that matches what should be replaced.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "repl",
            "Type": "string",
            "Description": "The string to replace matches with.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "rxreplace \"\u003cb\u003eHello \u003ci\u003eWorld\u003c/i\u003e\u003c/b\u003e\" \"\u003c/?[bi]\u003e\" \"*\"",
            "Description": "",
            "Return": "*Hello *World**"
          }
        ]
      },
      {
        "Name": "concat",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the string that results in stringifying and joining all of the given arguments.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "values",
            "Type": "any",
            "Description": "One or more values to be stringified and joined together.",
            "Variadic": true,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "concat \"There are \" 5 \" apples, yes it's \" true",
            "Description": "",
            "Return": "There are 5 apples, yes it's true."
          }
        ]
      },
      {
        "Name": "rtrim",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the given string with any trailing whitespace removed.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "in",
            "Type": "string",
            "Description": "The input string to trim.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "trim \" Hello   World  \"",
            "Description": "",
            "Return": " Hello  World"
          }
        ]
      },
      {
        "Name": "split",
        "Alias": "",
        "Aliases": null,
        "Summary": "Split a given string into an array of strings by a given separator.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "in",
            "Type": "string",
            "Description": "The string to split into pieces.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "separator",
            "Type": "string",
            "Description": "The separator on which the input will be split.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "split \"this is a sentence.\"",
            "Description": "",
            "Return": [
              "this",
              "is",
              "a",
              "sentence."
            ]
          }
        ]
      },
      {
        "Name": "join",
        "Alias": "",
        "Aliases": null,
        "Summary": "Stringify the given array of values and join them together into a string, separated by a given separator string.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "input",
            "Type": "array[any]",
            "Description": "An array of values to stringify and join.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "separator",
            "Type": "string",
            "Description": "The string used to join all elements of the array together.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": null
      },
      {
        "Name": "strcount",
        "Alias": "",
        "Aliases": null,
        "Summary": "Count counts the number of non-overlapping instances of a substring. If the given substring is empty, then this returns the length of the string plus one.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "titleize",
        "Alias": "",
        "Aliases": null,
        "Summary": "Reformat the given string by changing it into Title Case capitalization.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "camelize",
        "Alias": "",
        "Aliases": null,
        "Summary": "Reformat the given string by changing it into camelCase capitalization.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "in",
            "Type": "string",
            "Description": "The input string to reformat.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "camelize \"This is a thing\"",
            "Description": "",
            "Return": "thisIsAThing"
          }
        ]
      },
      {
        "Name": "pascalize",
        "Alias": "",
        "Aliases": null,
        "Summary": "Reformat the given string by changing it into PascalCase capitalization.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "in",
            "Type": "string",
            "Description": "The input string to reformat.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "pascalize \"This is a thing\"",
            "Description": "",
            "Return": "ThisIsAThing"
          }
        ]
      },
      {
        "Name": "underscore",
        "Alias": "",
        "Aliases": null,
        "Summary": "Reformat the given string by changing it into \\_underscorecase\\_ capitalization (also known as snake\\_case).",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "in",
            "Type": "string",
            "Description": "The input string to reformat.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "underscore \"This is a thing\"",
            "Description": "",
            "Return": "this_is_a_thing"
          }
        ]
      },
      {
        "Name": "hyphenate",
        "Alias": "",
        "Aliases": null,
        "Summary": "Reformat the given string by changing it into hyphen-case capitalization.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "in",
            "Type": "string",
            "Description": "The input string to reformat.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "hyphenate \"This is a thing\"",
            "Description": "",
            "Return": "this-is-a-thing"
          }
        ]
      },
      {
        "Name": "trim",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the given string with any leading and trailing whitespace removed.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "in",
            "Type": "string",
            "Description": "The input string to trim.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "trim \" Hello   World  \"",
            "Description": "",
            "Return": "Hello  World"
          }
        ]
      },
      {
        "Name": "upper",
        "Alias": "",
        "Aliases": null,
        "Summary": "Reformat the given string by changing it into UPPER CASE capitalization.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "in",
            "Type": "string",
            "Description": "The input string to reformat.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "upper \"This is a thing",
            "Description": "",
            "Return": "THIS IS A THING"
          }
        ]
      },
      {
        "Name": "hasPrefix",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return true if the given string begins with the given prefix.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "in",
            "Type": "string",
            "Description": "The input string to test.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "prefix",
            "Type": "string",
            "Description": "The prefix to test for the presence of.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": null
      },
      {
        "Name": "hasSuffix",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return true if the given string ends with the given suffix.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "in",
            "Type": "string",
            "Description": "The input string to test.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "suffix",
            "Type": "string",
            "Description": "The suffix to test for the presence of.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": null
      },
      {
        "Name": "surroundedBy",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return whether the given string is begins with a specific prefix _and_ ends with a specific suffix.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "input",
            "Type": "string",
            "Description": "The string to test.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "prefix",
            "Type": "string",
            "Description": "A string to prepend to the given input string.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "suffix",
            "Type": "string",
            "Description": "A string to append to the given input string.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "surroundedBy \"\u003ctable\u003e\" \"\u003c\" \"\u003e\"",
            "Description": "",
            "Return": true
          }
        ]
      },
      {
        "Name": "percent",
        "Alias": "",
        "Aliases": null,
        "Summary": "Takes an integer or decimal value and returns it formatted as a percentage.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "value",
            "Type": "number",
            "Description": "The value you wish to express as a percentage.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "whole",
            "Type": "number",
            "Description": "The number that represents 100%.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "format",
            "Type": "string",
            "Description": "The printf format string used for rounding and truncating the converted number.",
            "Variadic": false,
            "Optional": true,
            "Default": "%.f",
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "percent 99",
            "Description": "",
            "Return": "99"
          },
          {
            "Code": "percent 3.3 10",
            "Description": "",
            "Return": "33"
          },
          {
            "Code": "percent 3.33 10 \"%.3f\"",
            "Description": "",
            "Return": "33.300"
          }
        ]
      },
      {
        "Name": "autobyte",
        "Alias": "",
        "Aliases": null,
        "Summary": "Attempt to convert the given number to a string representation of the value interpreted as bytes. The unit will be automatically determined as the closest one that produces a value less than 1024 in that unit. The second argument is a printf-style format string that is used when the converted number is being stringified. By specifying precision and leading digit values to the %f format token, you can control how many decimal places are in the resulting output.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "bytes",
            "Type": "number",
            "Description": "A number representing the value to format, in bytes.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "format",
            "Type": "string",
            "Description": "A printf-style format string used to represent the output number.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "autobyte 2490368 \"%.2f\"",
            "Description": "",
            "Return": "2.38MB"
          }
        ]
      },
      {
        "Name": "thousandify",
        "Alias": "",
        "Aliases": null,
        "Summary": "Take a number and reformat it to be more readable by adding a separator between every three successive places.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "splitWords",
        "Alias": "",
        "Aliases": null,
        "Summary": "Detect word boundaries in a given string and split that string into an array where each element is a word.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "elideWords",
        "Alias": "",
        "Aliases": null,
        "Summary": "Takes an input string and counts the number of words in it. If that number exceeds a given count, the string will be truncated to be equal to that number of words.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "input",
            "Type": "string",
            "Description": "The string to (possibly) truncate.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "wordcount",
            "Type": "integer",
            "Description": "The maximum number of words that can appear in a string before it is truncated.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "elideWords \"This is a sentence that contains eight words.\" 5",
            "Description": "",
            "Return": "This is a sentence that"
          },
          {
            "Code": "elideWords \"Hello world\" 10",
            "Description": "",
            "Return": "Hello world"
          }
        ]
      },
      {
        "Name": "elide",
        "Alias": "",
        "Aliases": null,
        "Summary": "Takes an input string and ensures it is no longer than a given number of characters.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "input",
            "Type": "string",
            "Description": "The string to (possibly) truncate.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "charcount",
            "Type": "integer",
            "Description": "The maximum number of characters that can appear in a string before it is truncated.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "elide \"This is a sentence that contains fifty characters.\" 18",
            "Description": "",
            "Return": "This is a sentence"
          },
          {
            "Code": "elide \"hello.\" 16",
            "Description": "",
            "Return": "hello."
          }
        ]
      }
    ],
    "Skip": false
  },
  {
    "Name": "File Path Manipulation",
    "Description": "Used to parse and extract data from strings representing paths in a filesystem or tree hierarchy.",
    "Functions": [
      {
        "Name": "basename",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the filename component of the given path.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "path",
            "Type": "string",
            "Description": "The path to extract the filename from.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "basename \"/this/is/my/file.jpg\"",
            "Description": "",
            "Return": "file.jpg"
          }
        ]
      },
      {
        "Name": "extname",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the extension component of the given path (always prefixed with a dot [.]).",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "path",
            "Type": "string",
            "Description": "The path to extract the file extension from.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "extname \"file.jpg\"",
            "Description": "",
            "Return": ".jpg"
          }
        ]
      },
      {
        "Name": "dirname",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the directory path component of the given path.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "path",
            "Type": "string",
            "Description": "The path to extract the parent directory from.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "dirname \"/this/is/my/file.jpg\"",
            "Description": "",
            "Return": "/this/is/my"
          }
        ]
      },
      {
        "Name": "pathjoin",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return a string of all given path components joined together using the system path separator.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "parts",
            "Type": "strings",
            "Description": "One or more strings or string arrays to join together into a path.",
            "Variadic": true,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "pathjoin \"/this\" \"is/my\" \"file.jpg\"",
            "Description": "",
            "Return": "/this/is/my/file.jpg"
          }
        ]
      },
      {
        "Name": "pwd",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the present working directory.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "dir",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return a list of files and directories in *path*, or in the current directory if not specified.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "path",
            "Type": "string",
            "Description": "The path to retrieve an array of children from.",
            "Variadic": false,
            "Optional": true,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "dir",
            "Description": "",
            "Return": [
              {
                "directory": false,
                "last_modified": "2006-01-02T15:04:05Z07:00",
                "mimetype": "image/jpeg",
                "name": "file.jpg",
                "path": "/this/is/my/file.jpg",
                "size": "124719"
              },
              {
                "directory": true,
                "last_modified": "2006-01-02T15:04:05Z07:00",
                "name": "css",
                "path": "/this/is/my/css",
                "size": "4096"
              },
              {
                "directory": false,
                "last_modified": "2006-01-02T15:04:05Z07:00",
                "mimetype": "text/plain",
                "name": "README.md",
                "path": "/this/is/my/README.md",
                "size": "11216"
              }
            ]
          }
        ]
      },
      {
        "Name": "pathInRoot",
        "Alias": "",
        "Aliases": null,
        "Summary": "Returns whether the given path falls within the Diecast serving root path.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "path",
            "Type": "string",
            "Description": "The path to check.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": null
      },
      {
        "Name": "mimetype",
        "Alias": "",
        "Aliases": null,
        "Summary": "Returns a best guess at the MIME type for the given filename.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "filename",
            "Type": "string",
            "Description": "The file to determine the type of.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "mimetype \"file.jpg\"",
            "Description": "",
            "Return": "image/jpeg"
          },
          {
            "Code": "mimetype \"index.html\"",
            "Description": "",
            "Return": "text/html"
          }
        ]
      },
      {
        "Name": "mimeparams",
        "Alias": "",
        "Aliases": null,
        "Summary": "Returns the parameters portion of the MIME type of the given filename.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "filename",
            "Type": "string",
            "Description": "The file to retrieve MIME parameters from.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "mimetype \"file.jpg\"",
            "Description": "",
            "Return": {}
          },
          {
            "Code": "mimetype \"index.html\"",
            "Description": "",
            "Return": {
              "charset": "utf-8"
            }
          }
        ]
      }
    ],
    "Skip": false
  },
  {
    "Name": "Encoding and Decoding",
    "Description": "For encoding typed data and data structures into well-known formats like JSON, CSV, and TSV.",
    "Functions": [
      {
        "Name": "jsonify",
        "Alias": "",
        "Aliases": null,
        "Summary": "Encode the given argument as a JSON document.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "data",
            "Type": "any",
            "Description": "The data to encode as JSON.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "indent",
            "Type": "string",
            "Description": "The string to indent successive tiers in the document hierarchy with.",
            "Variadic": false,
            "Optional": true,
            "Default": "  ",
            "Valid": null
          }
        ],
        "Examples": null
      },
      {
        "Name": "markdown",
        "Alias": "",
        "Aliases": null,
        "Summary": "Parse the given string as a Markdown document and return it represented as HTML.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "document",
            "Type": "string",
            "Description": "The full text of the Markdown to parse",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "extensions",
            "Type": "string(s)",
            "Description": "A list of zero of more Markdown extensions to enable when rendering the HTML.",
            "Variadic": true,
            "Optional": false,
            "Default": null,
            "Valid": [
              {
                "Name": "no-intra-emphasis",
                "Type": "",
                "Description": "",
                "Variadic": false,
                "Optional": false,
                "Default": null,
                "Valid": null
              },
              {
                "Name": "tables",
                "Type": "",
                "Description": "",
                "Variadic": false,
                "Optional": false,
                "Default": null,
                "Valid": null
              },
              {
                "Name": "fenced-code",
                "Type": "",
                "Description": "",
                "Variadic": false,
                "Optional": false,
                "Default": null,
                "Valid": null
              },
              {
                "Name": "autolink",
                "Type": "",
                "Description": "",
                "Variadic": false,
                "Optional": false,
                "Default": null,
                "Valid": null
              },
              {
                "Name": "strikethrough",
                "Type": "",
                "Description": "",
                "Variadic": false,
                "Optional": false,
                "Default": null,
                "Valid": null
              },
              {
                "Name": "lax-html-blocks",
                "Type": "",
                "Description": "",
                "Variadic": false,
                "Optional": false,
                "Default": null,
                "Valid": null
              },
              {
                "Name": "space-headings",
                "Type": "",
                "Description": "",
                "Variadic": false,
                "Optional": false,
                "Default": null,
                "Valid": null
              },
              {
                "Name": "hard-line-break",
                "Type": "",
                "Description": "",
                "Variadic": false,
                "Optional": false,
                "Default": null,
                "Valid": null
              },
              {
                "Name": "tab-size-eight",
                "Type": "",
                "Description": "",
                "Variadic": false,
                "Optional": false,
                "Default": null,
                "Valid": null
              },
              {
                "Name": "footnotes",
                "Type": "",
                "Description": "",
                "Variadic": false,
                "Optional": false,
                "Default": null,
                "Valid": null
              },
              {
                "Name": "no-empty-line-before-block",
                "Type": "",
                "Description": "",
                "Variadic": false,
                "Optional": false,
                "Default": null,
                "Valid": null
              },
              {
                "Name": "heading-ids",
                "Type": "",
                "Description": "",
                "Variadic": false,
                "Optional": false,
                "Default": null,
                "Valid": null
              },
              {
                "Name": "titleblock",
                "Type": "",
                "Description": "",
                "Variadic": false,
                "Optional": false,
                "Default": null,
                "Valid": null
              },
              {
                "Name": "auto-heading-ids",
                "Type": "",
                "Description": "",
                "Variadic": false,
                "Optional": false,
                "Default": null,
                "Valid": null
              },
              {
                "Name": "backslash-line-break",
                "Type": "",
                "Description": "",
                "Variadic": false,
                "Optional": false,
                "Default": null,
                "Valid": null
              },
              {
                "Name": "definition-lists",
                "Type": "",
                "Description": "",
                "Variadic": false,
                "Optional": false,
                "Default": null,
                "Valid": null
              },
              {
                "Name": "common",
                "Type": "",
                "Description": "",
                "Variadic": false,
                "Optional": false,
                "Default": null,
                "Valid": null
              }
            ]
          }
        ],
        "Examples": null
      },
      {
        "Name": "csv",
        "Alias": "",
        "Aliases": null,
        "Summary": "Encode the given data as a comma-separated values document.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "columns",
            "Type": "array[string]",
            "Description": "An array of values that represent the column names of the table being created.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "rows",
            "Type": "array[array[string]], array[object]",
            "Description": "An array of values that represent the column names of the table being created.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": null
      },
      {
        "Name": "tsv",
        "Alias": "",
        "Aliases": null,
        "Summary": "Encode the given data as a tab-separated values document.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "columns",
            "Type": "array[string]",
            "Description": "An array of values that represent the column names of the table being created.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "rows",
            "Type": "array[array[string]], array[object]",
            "Description": "An array of values that represent the column names of the table being created.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": null
      },
      {
        "Name": "unsafe",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return an unescaped raw HTML segment for direct inclusion in the rendered template output.This function bypasses the built-in HTML escaping and sanitization security features, and you almost certainly want to use [sanitize](#fn-sanitize) instead.  This is a common antipattern that leads to all kinds of security issues from poorly-constrained implementations, so you are forced to acknowledge this by typing \"unsafe\".",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "document",
            "Type": "string",
            "Description": "The raw HTML snippet you sneakily want to sneak past the HTML sanitizer for reasons.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": null
      },
      {
        "Name": "sanitize",
        "Alias": "",
        "Aliases": null,
        "Summary": "Takes a raw HTML string and santizes it, removing attributes and elements that can be used to evaluate scripts, but leaving the rest. Useful for preparing user-generated HTML for display.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "",
            "Type": "",
            "Description": "",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": null
      },
      {
        "Name": "urlencode",
        "Alias": "",
        "Aliases": null,
        "Summary": "Encode a given string so it can be safely placed inside a URL query.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "string",
            "Type": "string",
            "Description": "The string to encode.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": null
      },
      {
        "Name": "urldecode",
        "Alias": "",
        "Aliases": null,
        "Summary": "Decode a URL-encoded string.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "encoded",
            "Type": "string",
            "Description": "The string to decode.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": null
      },
      {
        "Name": "urlPathEncode",
        "Alias": "",
        "Aliases": null,
        "Summary": "Encode a given string so it can be safely placed inside a URL path segment.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "string",
            "Type": "string",
            "Description": "The string to encode.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": null
      },
      {
        "Name": "urlPathDecode",
        "Alias": "",
        "Aliases": null,
        "Summary": "Decode a URL-encoded path.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "encoded",
            "Type": "string",
            "Description": "The string to decode.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": null
      }
    ],
    "Skip": false
  },
  {
    "Name": "Type Detection and Manipulation",
    "Description": "Used to detect and convert discrete values into different data types.",
    "Functions": [
      {
        "Name": "isBool",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return whether the given *value* is a boolean type.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "isInt",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return whether the given *value* is an integer type.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "isFloat",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return whether the given *value* is a floating-point type.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "isZero",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return whether the given *value* is an zero-valued variable.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "isEmpty",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return whether the given *value* is empty.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "isArray",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return whether the given *value* is an iterable array or slice.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "isMap",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return whether the given *value* is a key-value map type.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "isTime",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return whether the given *value* is parsable as a date/time value.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "isDuration",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return whether the given *value* is parsable as a duration.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "autotype",
        "Alias": "",
        "Aliases": null,
        "Summary": "Attempt to automatically determine the type if *value* and return the converted output.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "asStr",
        "Alias": "",
        "Aliases": [
          "s"
        ],
        "Summary": "Return the *value* as a string.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "asInt",
        "Alias": "",
        "Aliases": [
          "i"
        ],
        "Summary": "Attempt to convert the given *value* to an integer.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "asFloat",
        "Alias": "",
        "Aliases": [
          "f"
        ],
        "Summary": "Attempt to convert the given *value* to a floating-point number.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "asBool",
        "Alias": "",
        "Aliases": [
          "b"
        ],
        "Summary": "Attempt to convert the given *value* to a boolean value.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "asTime",
        "Alias": "",
        "Aliases": [
          "t"
        ],
        "Summary": "Attempt to parse the given *value* as a date/time value.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "asDuration",
        "Alias": "",
        "Aliases": [
          "d"
        ],
        "Summary": "Attempt to parse the given *value* as a time duration.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "s",
        "Alias": "asStr",
        "Aliases": null,
        "Summary": "",
        "Returns": "",
        "Hidden": true,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "i",
        "Alias": "asInt",
        "Aliases": null,
        "Summary": "",
        "Returns": "",
        "Hidden": true,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "f",
        "Alias": "asFloat",
        "Aliases": null,
        "Summary": "",
        "Returns": "",
        "Hidden": true,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "b",
        "Alias": "asBool",
        "Aliases": null,
        "Summary": "",
        "Returns": "",
        "Hidden": true,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "t",
        "Alias": "asTime",
        "Aliases": null,
        "Summary": "",
        "Returns": "",
        "Hidden": true,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "d",
        "Alias": "asDuration",
        "Aliases": null,
        "Summary": "",
        "Returns": "",
        "Hidden": true,
        "Arguments": null,
        "Examples": null
      }
    ],
    "Skip": false
  },
  {
    "Name": "Time Functions",
    "Description": "Used for working with time and duration values. Among this collection are functions for converting values to times, formatting time values, and performing time-oriented calculations on those values.",
    "Functions": [
      {
        "Name": "time",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the given time formatted using a given format.  See [Time Formats](#time-formats) for acceptable formats.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "time",
            "Type": "string, integer",
            "Description": "The time you want to format.  Parsing is extremely flexible, and can handle dates represented as RFC3339,  RFC822, RFC1123, epoch, or epoch nanoseconds.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "time \"01 May 10 13:04 -0500\" \"rfc3339\"",
            "Description": "",
            "Return": "2010-05-01T13:04:00-05:00"
          },
          {
            "Code": "time 1136239445 \"ansic\"",
            "Description": "",
            "Return": "Mon Jan  2 22:04:05 2006"
          }
        ]
      },
      {
        "Name": "now",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the current time, optionally formatted using the given format.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "format",
            "Type": "string",
            "Description": "How to format the time output. See [Time Formats](#time-formats) for how to use format strings.",
            "Variadic": false,
            "Optional": true,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "now",
            "Description": "",
            "Return": "2010-05-01T13:04:00-05:00"
          },
          {
            "Code": "now \"ansic\"",
            "Description": "",
            "Return": "Mon Jan  2 22:04:05 2006"
          }
        ]
      },
      {
        "Name": "addTime",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return a time with with given duration added to it.  Can specify time at to apply the change to. Defaults to the current time.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "duration",
            "Type": "string",
            "Description": "The duration to add to the time (can be negative to subtract a duration). See [Time Durations](#time-durations) for how to specify durations.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "from",
            "Type": "string",
            "Description": "If specified, this time will be parsed and modified instead of the current time.",
            "Variadic": false,
            "Optional": true,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "addTime \"2h30m\"",
            "Description": "",
            "Return": "2010-05-01T15:34:00-05:00"
          },
          {
            "Code": "addTime \"-14d\" \"2011-10-21T12:00:00-08:00\"",
            "Description": "",
            "Return": "2011-10-07T12:00:00-08:00"
          }
        ]
      },
      {
        "Name": "ago",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return a new time subtracted by the given duration.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "since",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the amount of time that has elapsed since the given time, optionally rounded to the nearest time interval.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "from",
            "Type": "string",
            "Description": "The time to use when determining the duration that time has elapsed from.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "interval",
            "Type": "string",
            "Description": "If specified, the resulting time duration will be rounded to the nearest interval of this unit.  Can be one of: \"second\" (nearest second), \"minute\" (nearest minute), \"hour\" (nearest hour), or \"day\" (nearest day).",
            "Variadic": false,
            "Optional": true,
            "Default": null,
            "Valid": [
              {
                "Name": "second",
                "Type": "",
                "Description": "",
                "Variadic": false,
                "Optional": false,
                "Default": null,
                "Valid": null
              },
              {
                "Name": "minute",
                "Type": "",
                "Description": "",
                "Variadic": false,
                "Optional": false,
                "Default": null,
                "Valid": null
              },
              {
                "Name": "hour",
                "Type": "",
                "Description": "",
                "Variadic": false,
                "Optional": false,
                "Default": null,
                "Valid": null
              },
              {
                "Name": "day",
                "Type": "",
                "Description": "",
                "Variadic": false,
                "Optional": false,
                "Default": null,
                "Valid": null
              }
            ]
          }
        ],
        "Examples": [
          {
            "Code": "since \"2010-05-01T13:04:15-05:00",
            "Description": "",
            "Return": ""
          },
          {
            "Code": "since \"-14d\" \"2011-10-21T12:00:00-08:00\"",
            "Description": "",
            "Return": "2011-10-07T12:00:00-08:00"
          }
        ]
      },
      {
        "Name": "duration",
        "Alias": "",
        "Aliases": null,
        "Summary": "Convert the given value from a duration (specified with the given unit) into the given time format.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "isBefore",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return whether the first time occurs before the second one.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "isAfter",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return whether the first time occurs after the second one.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "isBetweenTimes",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return whether the current time is between two times [first, second).",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "extractTime",
        "Alias": "",
        "Aliases": null,
        "Summary": "Attempt to extract a time value from the given string.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "sunrise",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the time of apparent sunrise at the given coordinates, optionally for a given time.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "sunset",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the time of apparent sunset at the given coordinates, optionally for a given time.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      }
    ],
    "Skip": false
  },
  {
    "Name": "Hashing and Cryptography",
    "Description": "These functions provide basic cryptographic and non-cryptographic functions, including cryptographically-secure random number generation.",
    "Functions": [
      {
        "Name": "murmur3",
        "Alias": "",
        "Aliases": null,
        "Summary": "Hash the given data using the Murmur3 algorithm.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "md5",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the MD5 hash of the given value.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "cleartext",
            "Type": "string",
            "Description": "The value to perform a one-way hash operation on.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "md5 \"p@ssw0rd!\"",
            "Description": "",
            "Return": "d5ec75d5fe70d428685510fae36492d9"
          }
        ]
      },
      {
        "Name": "sha1",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the SHA-1 hash of the given value.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "cleartext",
            "Type": "string",
            "Description": "The value to perform a one-way hash operation on.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "sha1 \"p@ssw0rd!\"",
            "Description": "",
            "Return": "ee7161e0fe1a06be63f515302806b34437563c9e"
          }
        ]
      },
      {
        "Name": "sha224",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the SHA-224 hash of the given value.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "cleartext",
            "Type": "string",
            "Description": "The value to perform a one-way hash operation on.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "sha224 \"p@ssw0rd!\"",
            "Description": "",
            "Return": "2d2e8b944f53164ee0aa8b1f98d75713c1b1bc6b9dd67591ef0a29e0"
          }
        ]
      },
      {
        "Name": "sha256",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the SHA-256 hash of the given value.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "cleartext",
            "Type": "string",
            "Description": "The value to perform a one-way hash operation on.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "sha256 \"p@ssw0rd!\"",
            "Description": "",
            "Return": "df2191783c6f13274b7c54330a370d0480e82a8a54069b69de73cbfa69f8ea08"
          }
        ]
      },
      {
        "Name": "sha384",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the SHA-384 hash of the given value.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "cleartext",
            "Type": "string",
            "Description": "The value to perform a one-way hash operation on.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "sha384 \"p@ssw0rd!\"",
            "Description": "",
            "Return": "d6d02abf2b495a6e4350fd985075c88e5a6807f8f79634ddde8529507a6145cb832f40fe0220f2af242a8a4b451fb7fc"
          }
        ]
      },
      {
        "Name": "sha512",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the SHA-512 hash of the given value.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "cleartext",
            "Type": "string",
            "Description": "The value to perform a one-way hash operation on.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "sha512 \"p@ssw0rd!\"",
            "Description": "",
            "Return": "0f8ea05dd2936700d8f23d7ceb0c7dde03e8dd2dcac714eb465c658412600457ebd143bbf8a00eed47fa0a0677cf2f2ad08f882173546a647c6802ecb19aeeb9"
          }
        ]
      },
      {
        "Name": "random",
        "Alias": "",
        "Aliases": null,
        "Summary": "Generates a random number.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "lower",
            "Type": "integer",
            "Description": "If specified, the number generated will be greater than or equal to this number.",
            "Variadic": false,
            "Optional": true,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "upper",
            "Type": "integer",
            "Description": "If specified, the number generated will be strictly less than this number.",
            "Variadic": false,
            "Optional": true,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": null
      },
      {
        "Name": "randomBytes",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return a random array of _n_ bytes. The random source used is suitable for cryptographic purposes.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "count",
            "Type": "integer",
            "Description": "The size of the output array of random bytes to return.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": null
      },
      {
        "Name": "uuid",
        "Alias": "",
        "Aliases": null,
        "Summary": "Generate a new Version 4 UUID as a string.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "uuidRaw",
        "Alias": "",
        "Aliases": null,
        "Summary": "Generate the raw bytes of a new Version 4 UUID value.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "hex",
        "Alias": "",
        "Aliases": null,
        "Summary": "Encode the given value as a hexadecimal string.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "input",
            "Type": "string, bytes",
            "Description": "The value to encode. If a byte array is provided, it will be encoded in hexadecimal. If a string is provided, it will converted to a byte array first, then encoded.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "hex \"hello\"",
            "Description": "",
            "Return": "68656c6c6f"
          }
        ]
      },
      {
        "Name": "base32",
        "Alias": "",
        "Aliases": null,
        "Summary": "Encode the given bytes with the Base32 encoding scheme.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "input",
            "Type": "string, bytes",
            "Description": "The value to encode. If a byte array is provided, it will be encoded directly. If a string is provided, it will converted to a byte array first, then encoded.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "base32 \"hello\"",
            "Description": "",
            "Return": "nbswy3dp"
          }
        ]
      },
      {
        "Name": "base58",
        "Alias": "",
        "Aliases": null,
        "Summary": "Encode the given bytes with the Base58 (Bitcoin alphabet) encoding scheme.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "base64",
        "Alias": "",
        "Aliases": null,
        "Summary": "Encode the given bytes with the Base64 encoding scheme.  Optionally specify the encoding mode: one of \"padded\", \"url\", \"url-padded\", or empty (unpadded, default).",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "input",
            "Type": "string, bytes",
            "Description": "The value to encode. If a byte array is provided, it will be encoded directly. If a string is provided, it will converted to a byte array first, then encoded.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "encoding",
            "Type": "string",
            "Description": "Specify an encoding option for generating the Base64 representation.",
            "Variadic": false,
            "Optional": true,
            "Default": null,
            "Valid": [
              {
                "Name": "standard",
                "Type": "",
                "Description": "Standard Base-64 encoding scheme, no padding.",
                "Variadic": false,
                "Optional": false,
                "Default": null,
                "Valid": null
              },
              {
                "Name": "padded",
                "Type": "",
                "Description": "Standard Base-64 encoding scheme, preserves padding.",
                "Variadic": false,
                "Optional": false,
                "Default": null,
                "Valid": null
              },
              {
                "Name": "url",
                "Type": "",
                "Description": "Encoding that can be used in URLs and filenames, no padding.",
                "Variadic": false,
                "Optional": false,
                "Default": null,
                "Valid": null
              },
              {
                "Name": "url-padded",
                "Type": "",
                "Description": "Encoding that can be used in URLs and filenames, preserves padding.",
                "Variadic": false,
                "Optional": false,
                "Default": null,
                "Valid": null
              }
            ]
          }
        ],
        "Examples": [
          {
            "Code": "base64 \"hello?yes=this\u0026is=dog#\"",
            "Description": "",
            "Return": "aGVsbG8/eWVzPXRoaXMmaXM9ZG9nIw"
          },
          {
            "Code": "base64 \"hello?yes=this\u0026is=dog#\" \"standard\"",
            "Description": "This is identical to the above example, but with the encoding explicitly specified.",
            "Return": "aGVsbG8/eWVzPXRoaXMmaXM9ZG9nIw"
          },
          {
            "Code": "base64 \"hello?yes=this\u0026is=dog#\" \"padded\"",
            "Description": "",
            "Return": "aGVsbG8/eWVzPXRoaXMmaXM9ZG9nIw=="
          },
          {
            "Code": "base64 \"hello?yes=this\u0026is=dog#\" \"url\"",
            "Description": "",
            "Return": "aGVsbG8_eWVzPXRoaXMmaXM9ZG9nIw"
          },
          {
            "Code": "base64 \"hello?yes=this\u0026is=dog#\" \"url-padded\"",
            "Description": "",
            "Return": "aGVsbG8_eWVzPXRoaXMmaXM9ZG9nIw=="
          }
        ]
      }
    ],
    "Skip": false
  },
  {
    "Name": "Math and Statistics",
    "Description": "These functions implement basic mathematical and statistical operations on numbers.",
    "Functions": [
      {
        "Name": "calc",
        "Alias": "",
        "Aliases": null,
        "Summary": "",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "add",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the sum of all of the given values.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "subtract",
        "Alias": "",
        "Aliases": null,
        "Summary": "Sequentially subtract all of the given values.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "multiply",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the product of all of the given values.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "divide",
        "Alias": "",
        "Aliases": null,
        "Summary": "Sequentially divide all of the given values in the order given.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "mod",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the modulus of all of the given values.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "pow",
        "Alias": "",
        "Aliases": null,
        "Summary": "Sequentially exponentiate of all of the given *values*.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "sequence",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return an array of integers representing a sequence from [0, _n_).",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "round",
        "Alias": "",
        "Aliases": null,
        "Summary": "Round a number to the nearest _n_ places.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "negate",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the given number multiplied by -1.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "isEven",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return whether the given number is even.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "isOdd",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return whether the given number is odd.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "maximum",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the maximum of the given array of numbers.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "mean",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the mean of the given array of numbers.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "median",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the median of the given array of numbers.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "minimum",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the minimum of the given array of numbers.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "minimum_nz",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the minimum (excluding zero) of the given array of numbers.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "stddev",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the standard deviation of the given array of numbers.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "sum",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the sum of the given array of numbers.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      }
    ],
    "Skip": false
  },
  {
    "Name": "Arrays and Objects",
    "Description": "For converting, modifying, and filtering arrays, objects, and arrays of objects. These functions are especially useful when working with data returned from Bindings.",
    "Functions": [
      {
        "Name": "append",
        "Alias": "",
        "Aliases": null,
        "Summary": "Append one or more values to the given array.  If the array given is not in fact an array, it will be converted into one, with the exception of null values, which will create an empty array.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "array",
            "Type": "array",
            "Description": "The array to append items to.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "values",
            "Type": "any",
            "Description": "One or more items to append to the given array.",
            "Variadic": true,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "append [\"a\", \"b\"] \"c\" \"d\"",
            "Description": "",
            "Return": [
              "a",
              "b",
              "c",
              "d"
            ]
          }
        ]
      },
      {
        "Name": "page",
        "Alias": "",
        "Aliases": null,
        "Summary": "Returns an integer representing an offset used for accessing paginated values when given a page number and number of results per page.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "pagenum",
            "Type": "integer",
            "Description": "The page number to calculate the offset of.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "perpage",
            "Type": "integer",
            "Description": "The maximum number of results that can appear on a single page.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "page 1 25",
            "Description": "",
            "Return": 0
          },
          {
            "Code": "page 2 25",
            "Description": "",
            "Return": 25
          },
          {
            "Code": "page 3 25",
            "Description": "",
            "Return": 50
          },
          {
            "Code": "page 2 10",
            "Description": "",
            "Return": 10
          }
        ]
      },
      {
        "Name": "reverse",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the given array in reverse order.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "array",
            "Type": "array",
            "Description": "The array to reverse.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "reverse [1,2,3]",
            "Description": "",
            "Return": [
              3,
              2,
              1
            ]
          }
        ]
      },
      {
        "Name": "filter",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the given array with only elements where expression evaluates to a truthy value.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "array",
            "Type": "array",
            "Description": "The array to operate on.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "expression",
            "Type": "string",
            "Description": "An \"{{ expression }}\" that will be called on each element.  Only if the expression does *not* yield a zero value (0, false, \"\", null) will the element be included in the resulting array.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "filter [1, 2, 3, 4, 5] \"{{ isOdd . }}\"",
            "Description": "",
            "Return": [
              1,
              3,
              5
            ]
          },
          {
            "Code": "filter [{\"active\": true, \"a\": 1}, {\"b\": 2}, {\"active\": true, \"c\": 3}] \"{{ .active }}\"",
            "Description": "",
            "Return": [
              {
                "a": 1,
                "active": true
              },
              {
                "active": true,
                "c": 3
              }
            ]
          }
        ]
      },
      {
        "Name": "filterByKey",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return a subset of the elements in the given array whose values are objects that contain the given key.  Optionally, the values at the key for each object in the array can be passed to a template expression.  If that expression produces a truthy value, the object will be included in the output.  Otherwise it will not.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "array",
            "Type": "array",
            "Description": "The array of objects to filter.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "key",
            "Type": "string",
            "Description": "The name of the key on each object in the given array to check the value of.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "expression",
            "Type": "string",
            "Description": "The \"{{ expression }}\" to apply to the value at key from each object.  Uses the same expression rules as [filter](#fn-filter)",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "filterByKey [{\"id\": \"a\", \"value\": 1}, {\"id\": \"b\", \"value\": 1}, {\"id\": \"c\", \"value\": 2}] 1",
            "Description": "",
            "Return": [
              {
                "id": "a",
                "value": 1
              },
              {
                "id": "b",
                "value": 1
              }
            ]
          }
        ]
      },
      {
        "Name": "firstByKey",
        "Alias": "",
        "Aliases": null,
        "Summary": "Identical to [filterByKey](#fn-filterByKey), except it returns only the first object in the resulting array instead of the whole array.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "array",
            "Type": "array",
            "Description": "The array of objects to filter.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "key",
            "Type": "string",
            "Description": "The name of the key on each object in the given array to check the value of.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "expression",
            "Type": "string",
            "Description": "The \"{{ expression }}\" to apply to the value at key from each object.  Uses the same expression rules as [filter](#fn-filter)",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "firstByKey [{\"id\": \"a\", \"value\": 1}, {\"id\": \"b\", \"value\": 1}, {\"id\": \"c\", \"value\": 2}] 1",
            "Description": "",
            "Return": {
              "id": "a",
              "value": 1
            }
          }
        ]
      },
      {
        "Name": "transformValues",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return all elements of the given array of objects with the value at a key transformed by the given expression.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "array",
            "Type": "array",
            "Description": "The array of objects to filter.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "key",
            "Type": "string",
            "Description": "The name of the key on each object in the given array to modify.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "expression",
            "Type": "string",
            "Description": "The \"{{ expression }}\" to apply to the value at key from each object.  Uses the same expression rules as [filter](#fn-filter)",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "transformValues [{\"name\": \"alice\"}, {\"name\": \"mallory\"}, {\"name\": \"bob\"}] \"name\" \"{{ upper . }}\"",
            "Description": "",
            "Return": [
              {
                "name": "ALICE"
              },
              {
                "name": "MALLORY"
              },
              {
                "name": "BOB"
              }
            ]
          }
        ]
      },
      {
        "Name": "uniqByKey",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return an array of objects containing only unique entries in the given array of objects. Uniqueness is determined by comparing the values at the given key for each object.  The first time a value is encountered, that value's parent object is included in the output.  All subsequent objects with the same value at that key will be discarded.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "array",
            "Type": "array",
            "Description": "The array of objects to filter.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "key",
            "Type": "string",
            "Description": "The name of the key on each object to consider for determining uniqueness.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "expression",
            "Type": "string",
            "Description": "The \"{{ expression }}\" to apply to the value at key from each object before determining uniqueness.  Uses the same expression rules as [filter](#fn-filter)",
            "Variadic": false,
            "Optional": true,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "uniqueByKey [{\"id\": \"a\", \"value\": 1}, {\"id\": \"b\", \"value\": 1}, {\"id\": \"c\", \"value\": 2}] \"value\"",
            "Description": "",
            "Return": [
              {
                "id": "a",
                "value": 1
              },
              {
                "id": "c",
                "value": 2
              }
            ]
          },
          {
            "Code": "uniqueByKey [{\"name\": \"bob\", \"i\": 1}, {\"name\": \"BOB\", \"i\": 2}, {\"name\": \"Bob\", \"i\": 3}] \"name\" \"{{ upper . }}\"",
            "Description": "Here we provide an expression that will normalize the value of the \"name\" field before performing the unique operation.",
            "Return": [
              {
                "i": 1,
                "name": "BOB"
              }
            ]
          }
        ]
      },
      {
        "Name": "uniqByKeyLast",
        "Alias": "",
        "Aliases": null,
        "Summary": "Identical to [uniqByKey](#fn-uniqByKey), except the _last_ of a set of objects grouped by key is included in the output, not the first.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "array",
            "Type": "array",
            "Description": "The array of objects to filter.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "key",
            "Type": "string",
            "Description": "The name of the key on each object to consider for determining uniqueness.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "expression",
            "Type": "string",
            "Description": "The \"{{ expression }}\" to apply to the value at key from each object before determining uniqueness.  Uses the same expression rules as [filter](#fn-filter)",
            "Variadic": false,
            "Optional": true,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "uniqByKeyLast [{\"id\": \"a\", \"value\": 1}, {\"id\": \"b\", \"value\": 1}, {\"id\": \"c\", \"value\": 2}] \"value\"",
            "Description": "",
            "Return": [
              {
                "id": "b",
                "value": 1
              },
              {
                "id": "c",
                "value": 2
              }
            ]
          },
          {
            "Code": "uniqueByKey [{\"name\": \"bob\", \"i\": 1}, {\"name\": \"BOB\", \"i\": 2}, {\"name\": \"Bob\", \"i\": 3}] \"name\" \"{{ upper . }}\"",
            "Description": "Here we provide an expression that will normalize the value of the \"name\" field before performing the unique operation.",
            "Return": [
              {
                "i": 3,
                "name": "BOB"
              }
            ]
          }
        ]
      },
      {
        "Name": "sortByKey",
        "Alias": "",
        "Aliases": null,
        "Summary": "Sort the given array of objects by comparing the values of the given key for all objects.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "array",
            "Type": "array",
            "Description": "The array of objects to sort.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "key",
            "Type": "string",
            "Description": "The name of the key on each object whose values should determine the order of the output array.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "expression",
            "Type": "string",
            "Description": "The \"{{ expression }}\" to apply to the value at key from each object before determining uniqueness.  Uses the same expression rules as [filter](#fn-filter)",
            "Variadic": false,
            "Optional": true,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "sortByKey [{\"name\": \"Bob\"}, {\"name\": \"Mallory\"}, {\"name\": \"Alice\"}] \"name\"",
            "Description": "",
            "Return": [
              {
                "name": "Alice"
              },
              {
                "name": "Bob"
              },
              {
                "name": "Mallory"
              }
            ]
          }
        ]
      },
      {
        "Name": "pluck",
        "Alias": "",
        "Aliases": null,
        "Summary": "Retrieve a value at the given key from each object in a given array of objects.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "array",
            "Type": "array",
            "Description": "The array of objects to retrieve values from.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "key",
            "Type": "string",
            "Description": "The name of the key on each object whose values should returned.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "additional_keys",
            "Type": "strings",
            "Description": "If specified, the values of these additional keys will be appended (in order) to the output array.",
            "Variadic": true,
            "Optional": true,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "pluck [{\"name\": \"Bob\"}, {\"name\": \"Mallory\"}, {\"name\": \"Alice\"}] \"name\"",
            "Description": "",
            "Return": [
              "Bob",
              "Mallory",
              "Alice"
            ]
          }
        ]
      },
      {
        "Name": "keys",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return an array of key names specifying all the keys of the given object.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "object",
            "Type": "object",
            "Description": "The object to return the key names from.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "keys {\"id\": \"a\", \"value\": 1}",
            "Description": "",
            "Return": [
              "id",
              "value"
            ]
          }
        ]
      },
      {
        "Name": "values",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return an array of values from the given object.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "object",
            "Type": "object",
            "Description": "The object to return values from.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "values {\"id\": \"a\", \"value\": 1}",
            "Description": "",
            "Return": [
              "a",
              1
            ]
          }
        ]
      },
      {
        "Name": "get",
        "Alias": "",
        "Aliases": null,
        "Summary": "Retrieve a value from a given object.  Key can be specified as a dot.separated.list string or array of keys that describes a path from the given object, through any intermediate nested objects, down to the object containing the desired value.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "object",
            "Type": "object",
            "Description": "The object to retrieve the value from",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "key",
            "Type": "string, array",
            "Description": "The key name, path, or array of values representing path segments pointing to the value to retrieve.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "fallback",
            "Type": "any",
            "Description": "If the value at the given key does not exist, this value will be returned instead.  If not specified, the default return value is null.",
            "Variadic": false,
            "Optional": true,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "get {\"name: \"Bob\"} \"name\"",
            "Description": "",
            "Return": "Bob"
          },
          {
            "Code": "get {\"properties\": {\"info\": {\"name: \"Bob\"}}} \"properties.info.name\"",
            "Description": "",
            "Return": "Bob"
          },
          {
            "Code": "get {\"properties\": {\"info\": {\"name: \"Bob\"}}} \"properties.info.age\"",
            "Description": "",
            "Return": null
          },
          {
            "Code": "get {\"properties\": {\"info\": {\"name: \"Bob\"}}} \"properties.info.age\" 42",
            "Description": "",
            "Return": 42
          },
          {
            "Code": "get {\"properties\": {\"info.name\": \"Bob\"}} [\"properties\", \"info.name\"]",
            "Description": "",
            "Return": "Bob"
          }
        ]
      },
      {
        "Name": "set",
        "Alias": "",
        "Aliases": null,
        "Summary": "Set a key on a given object to a value. Key can be specified as a dot.separated.list string or array of keys that describes a path in the given object, through any intermediate nested objects, down to the object where the given value will go.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "object",
            "Type": "object",
            "Description": "The object to retrieve the value from",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "key",
            "Type": "string, array",
            "Description": "The key name, path, or array of values representing path segments pointing to the value to create or modify.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "value",
            "Type": "any",
            "Description": "The value to set.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": null
      },
      {
        "Name": "findKey",
        "Alias": "",
        "Aliases": [
          "findkey"
        ],
        "Summary": "Recursively scans the given array or object and returns all values of the given key.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "input",
            "Type": "array, object",
            "Description": "The object or array of object to retrieve values from.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "key",
            "Type": "string",
            "Description": "The name of the key in any objects encountered whose value should be included in the output.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "findKey [{\"id\": 1, \"children\": [{\"id\": 3}, {\"id\": 5}, {\"id\": 8}]} \"id\"",
            "Description": "",
            "Return": [
              1,
              3,
              5,
              8
            ]
          }
        ]
      },
      {
        "Name": "has",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return whether a specific element is in an array.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "wanted",
            "Type": "any",
            "Description": "The value being sought out.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "input",
            "Type": "array",
            "Description": "The array to search within.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "has \"e\" [\"a\", \"e\", \"i\", \"o\", \"u\"]",
            "Description": "",
            "Return": true
          },
          {
            "Code": "has \"y\" [\"a\", \"e\", \"i\", \"o\", \"u\"]",
            "Description": "",
            "Return": false
          },
          {
            "Code": "has \"13\" [\"3\", \"5\", \"8\", \"13\"]",
            "Description": "",
            "Return": true
          },
          {
            "Code": "has 13 [\"3\", \"5\", \"8\", \"13\"]",
            "Description": "",
            "Return": true
          },
          {
            "Code": "has 14 [\"3\", \"5\", \"8\", \"13\"]",
            "Description": "",
            "Return": false
          }
        ]
      },
      {
        "Name": "any",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return whether an array contains any of a set of desired items.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "input",
            "Type": "array",
            "Description": "The array to search within.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "wanted",
            "Type": "any",
            "Description": "A list of values, any of which being present in the given array will return true.",
            "Variadic": true,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "any [\"a\", \"e\", \"i\", \"o\", \"u\"] \"e\" \"y\" \"x\"",
            "Description": "",
            "Return": true
          },
          {
            "Code": "any [\"r\", \"s\", \"t\", \"l\", \"n\", \"e\"] \"f\" \"m\" \"w\" \"o\"",
            "Description": "",
            "Return": false
          }
        ]
      },
      {
        "Name": "indexOf",
        "Alias": "",
        "Aliases": null,
        "Summary": "Iterate through an array and return the index of a given value, or -1 if not present.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "input",
            "Type": "array",
            "Description": "The array to search within.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "wanted",
            "Type": "any",
            "Description": "The value being sought out.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "indexOf [\"a\", \"e\", \"i\", \"o\", \"u\"] \"e\"",
            "Description": "",
            "Return": 1
          },
          {
            "Code": "indexOf [\"a\", \"e\", \"i\", \"o\", \"u\"] \"y\"",
            "Description": "",
            "Return": -1
          }
        ]
      },
      {
        "Name": "slice",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return a subset of the given array.  Items in an array are counted starting from zero.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "input",
            "Type": "array",
            "Description": "The array to slice up.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "from",
            "Type": "integer",
            "Description": "The starting index within the given array to start returning items from.  Can be negative, indicating the nth element from the end of the array (e.g: -1 means \"last element\", -2 is \"second from last\", and so on.).",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "to",
            "Type": "integer",
            "Description": "The end index within the given array to stop returning items from.  Can be negative, indicating the nth element from the end of the array (e.g: -1 means \"last element\", -2 is \"second from last\", and so on.).",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "slice [\"a\", \"e\", \"i\", \"o\", \"u\"] 0 -1",
            "Description": "",
            "Return": [
              "a",
              "e",
              "i",
              "o",
              "u"
            ]
          },
          {
            "Code": "slice [\"a\", \"e\", \"i\", \"o\", \"u\"] 2 -1",
            "Description": "",
            "Return": [
              "i",
              "o",
              "u"
            ]
          },
          {
            "Code": "slice [\"a\", \"e\", \"i\", \"o\", \"u\"] -3 -1",
            "Description": "",
            "Return": [
              "i",
              "o",
              "u"
            ]
          },
          {
            "Code": "slice [\"a\", \"e\", \"i\", \"o\", \"u\"] 1 1",
            "Description": "",
            "Return": [
              "e"
            ]
          }
        ]
      },
      {
        "Name": "sslice",
        "Alias": "",
        "Aliases": null,
        "Summary": "Identical to [slice](#fn-slice), but returns an array of strings.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "uniq",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return an array containing only unique values from the given array.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "input",
            "Type": "array",
            "Description": "The array to unique.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "uniq [\"a\", \"a\", \"b\", \"b\", \"b\", \"c\"]",
            "Description": "",
            "Return": [
              "a",
              "b",
              "c"
            ]
          }
        ]
      },
      {
        "Name": "flatten",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return an array of values with all nested arrays collapsed down to a single, flat array.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "input",
            "Type": "array",
            "Description": "The array to flatten.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "flatten [\"a\", [\"a\", \"b\"], [\"b\", \"b\", [\"c\"]]]",
            "Description": "",
            "Return": [
              "a",
              "a",
              "b",
              "b",
              "b",
              "c"
            ]
          }
        ]
      },
      {
        "Name": "compact",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return an copy of given array with all empty, null, and zero elements removed.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "input",
            "Type": "array",
            "Description": "The array to compact.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "uniq [\"a\", null, \"b\", 0, false, \"c\"]",
            "Description": "",
            "Return": [
              "a",
              "b",
              "c"
            ]
          }
        ]
      },
      {
        "Name": "first",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the first value from the given array, or null if the array is empty.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "input",
            "Type": "array",
            "Description": "The array to read from.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "first [\"a\", \"b\", \"c\", \"d\"]",
            "Description": "",
            "Return": "a"
          }
        ]
      },
      {
        "Name": "rest",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return all but the first value from the given array, or an empty array of the given array's length is \u003c= 1.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "input",
            "Type": "array",
            "Description": "The array to read from.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "rest [\"a\", \"b\", \"c\", \"d\"]",
            "Description": "",
            "Return": [
              "b",
              "c",
              "d"
            ]
          },
          {
            "Code": "rest [\"a\"]",
            "Description": "",
            "Return": []
          }
        ]
      },
      {
        "Name": "last",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the last value from the given array, or null if the array is empty.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "input",
            "Type": "array",
            "Description": "The array to read from.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "last [\"a\", \"b\", \"c\", \"d\"]",
            "Description": "",
            "Return": "d"
          }
        ]
      },
      {
        "Name": "count",
        "Alias": "",
        "Aliases": null,
        "Summary": "Identical to the built-in \"len\" function, but is less picky about types.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "input",
            "Type": "array",
            "Description": "The array to read from.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "count [\"a\", \"b\", \"c\", \"d\"]",
            "Description": "",
            "Return": 4
          }
        ]
      },
      {
        "Name": "sort",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return an array sorted in lexical ascending order.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "input",
            "Type": "array",
            "Description": "The array to sort.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "sort [\"d\", \"a\", \"c\", \"b\"]",
            "Description": "",
            "Return": [
              "a",
              "b",
              "c",
              "d"
            ]
          }
        ]
      },
      {
        "Name": "rsort",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the array sorted in lexical descending order.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "input",
            "Type": "array",
            "Description": "The array to sort.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "rsort [\"d\", \"a\", \"c\", \"b\"]",
            "Description": "",
            "Return": [
              "d",
              "c",
              "b",
              "a"
            ]
          }
        ]
      },
      {
        "Name": "isort",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return an array sorted in lexical ascending order (case-insensitive.)",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "input",
            "Type": "array",
            "Description": "The array to sort.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "isort [\"bob\", \"ALICE\", \"Mallory\"]",
            "Description": "",
            "Return": [
              "ALICE",
              "bob",
              "Mallory"
            ]
          }
        ]
      },
      {
        "Name": "irsort",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the array sorted in lexical descending order (case-insensitive.)",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "input",
            "Type": "array",
            "Description": "The array to sort.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "irsort [\"bob\", \"ALICE\", \"Mallory\"]",
            "Description": "",
            "Return": [
              "Mallory",
              "bob",
              "ALICE"
            ]
          }
        ]
      },
      {
        "Name": "mostcommon",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the element in a given array that appears the most frequently.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "input",
            "Type": "array",
            "Description": "The array to read from.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "mostcommon [\"a\", \"a\", \"b\", \"b\", \"b\", \"c\"]",
            "Description": "",
            "Return": "b"
          }
        ]
      },
      {
        "Name": "leastcommon",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the element in a given array that appears the least frequently.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "input",
            "Type": "array",
            "Description": "The array to read from.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "leastcommon [\"a\", \"a\", \"b\", \"b\", \"b\", \"c\"]",
            "Description": "",
            "Return": "c"
          }
        ]
      },
      {
        "Name": "sliceify",
        "Alias": "",
        "Aliases": null,
        "Summary": "Convert the given input into an array.  If the value is already an array, this just returns that array.  Otherwise, it returns an array containing the given value as its only element.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "input",
            "Type": "any",
            "Description": "The value to make into an array.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "sliceify [\"a\", \"b\", \"c\"]",
            "Description": "",
            "Return": [
              "a",
              "b",
              "c"
            ]
          },
          {
            "Code": "sliceify 4",
            "Description": "",
            "Return": [
              4
            ]
          }
        ]
      },
      {
        "Name": "stringify",
        "Alias": "",
        "Aliases": null,
        "Summary": "Identical to [sliceify](#fn-sliceify), but converts all values to strings and returns an array of strings.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "intersect",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the intersection of two arrays.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "first",
            "Type": "array",
            "Description": "The first array.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "second",
            "Type": "array",
            "Description": "The second array.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "intersect [\"b\", \"a\", \"c\"] [\"c\", \"b\", \"d\"]",
            "Description": "",
            "Return": [
              "b",
              "c"
            ]
          },
          {
            "Code": "intersect [\"a\", \"b\", \"c\"] [\"x\", \"y\", \"z\"]",
            "Description": "",
            "Return": []
          }
        ]
      },
      {
        "Name": "mapify",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the given value returned as a rangeable object.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "groupBy",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the given array of objects as a grouped object, keyed on the value of the specified group field. The field argument can be an expression that receives the value and returns a transformed version of it.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "array",
            "Type": "array",
            "Description": "An array of objects to group.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "key",
            "Type": "string",
            "Description": "The key to retreive from each object, the value of which will determine the group names.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "groupBy [{\"name\": \"Bob\", \"title\": \"Friend\"}, {\"name\": \"Mallory\", \"title\": \"Foe\"}, {\"name\": \"Alice\", \"title\": \"Friend\"}] \"title\"",
            "Description": "",
            "Return": {
              "Foe": [
                {
                  "name": "Mallory",
                  "title": "Foe"
                }
              ],
              "Friend": [
                {
                  "name": "Bob",
                  "title": "Friend"
                },
                {
                  "name": "Alice",
                  "title": "Friend"
                }
              ]
            }
          }
        ]
      },
      {
        "Name": "head",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the first _n_ items from an array.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "input",
            "Type": "array",
            "Description": "The array to read from.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "count",
            "Type": "integer",
            "Description": "The number of items to retrieve from the beginning of the array.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "head [\"a\", \"b\", \"c\", \"d\"] 2",
            "Description": "",
            "Return": [
              "a",
              "b"
            ]
          }
        ]
      },
      {
        "Name": "tail",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the last _n_ items from an array.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "input",
            "Type": "array",
            "Description": "The array to read from.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "count",
            "Type": "integer",
            "Description": "The number of items to retrieve from the end of the array.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "tail [\"a\", \"b\", \"c\", \"d\"] 2",
            "Description": "",
            "Return": [
              "c",
              "d"
            ]
          }
        ]
      },
      {
        "Name": "shuffle",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return the array with the elements rearranged in random order.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "input",
            "Type": "array",
            "Description": "The array to shuffle.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "shuffle [\"a\", \"b\", \"c\", \"d\"]",
            "Description": "",
            "Return": [
              "d",
              "c",
              "b",
              "a"
            ]
          }
        ]
      },
      {
        "Name": "apply",
        "Alias": "",
        "Aliases": null,
        "Summary": "Apply a function to each of the elements in the given array. Note that functions must be unary (accept one argument of type _any_).",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "input",
            "Type": "array",
            "Description": "The array to modify.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "functions",
            "Type": "strings",
            "Description": "One or more functions to pass each element to. Only supports functions that accept a zero or one arguments.",
            "Variadic": true,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "apply [\"a\", \"B\", \"C\", \"d\"] \"upper\"",
            "Description": "",
            "Return": [
              "A",
              "B",
              "C",
              "D"
            ]
          },
          {
            "Code": "apply [\"a\", \"B\", \"C\", \"d\"] \"upper\" \"lower\"",
            "Description": "",
            "Return": [
              "a",
              "b",
              "c",
              "d"
            ]
          }
        ]
      },
      {
        "Name": "diffuse",
        "Alias": "",
        "Aliases": null,
        "Summary": "Convert an array of objects or object representing a single-level hierarchy of items and expand it into a deeply-nested object.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "input",
            "Type": "array/object",
            "Description": "The array or object to expand into a deeply-nested object.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "joiner",
            "Type": "string",
            "Description": "The string used in object keys that separates levels of the hierarchy.",
            "Variadic": true,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "diffuse {\"properties/enabled\": true, \"properties/label\": \"items\", \"name\": \"Items\", \"properties/tasks/0\": \"do things\", \"properties/tasks/1\": \"do stuff\"} \"/\"",
            "Description": "",
            "Return": {
              "name": "Items",
              "properties": {
                "enabled": true,
                "label": "items",
                "tasks": [
                  "do things",
                  "do stuff"
                ]
              }
            }
          }
        ]
      },
      {
        "Name": "coalesce",
        "Alias": "",
        "Aliases": null,
        "Summary": "Convert an array of objects or object representing a deeply-nested hierarchy of items and collapse it into a flat (not nested) object.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "input",
            "Type": "array/object",
            "Description": "The array or object to expand into a deeply-nested object.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "joiner",
            "Type": "string",
            "Description": "The string used in object keys that separates levels of the hierarchy.",
            "Variadic": true,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": null
      },
      {
        "Name": "isLastElement",
        "Alias": "",
        "Aliases": null,
        "Summary": "Returns whether the given index in the given array is the last element in that array.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "index",
            "Type": "integer",
            "Description": "The current index of the item in the collection.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "array",
            "Type": "array",
            "Description": "The array being checked",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": null
      },
      {
        "Name": "findkey",
        "Alias": "findKey",
        "Aliases": null,
        "Summary": "",
        "Returns": "",
        "Hidden": true,
        "Arguments": null,
        "Examples": null
      }
    ],
    "Skip": false
  },
  {
    "Name": "HTML Processing",
    "Description": "Used to parse and modify HTML documents.",
    "Functions": [
      {
        "Name": "stripHtml",
        "Alias": "",
        "Aliases": null,
        "Summary": "Removes all HTML tags from a given input string, leaving behind only the textual content of the nodes. Only text nodes are preserved; attribute names and values, and comments, will be omitted.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "htmlQuery",
        "Alias": "",
        "Aliases": [
          "htmlquery"
        ],
        "Summary": "Parse a given HTML document and return details about all elements matching a CSS selector.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "document",
            "Type": "string",
            "Description": "The HTML document to parse.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "selector",
            "Type": "string",
            "Description": "A CSS selector that targets the elements that will be returned.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": null
      },
      {
        "Name": "htmlRemove",
        "Alias": "",
        "Aliases": null,
        "Summary": "Parse a given HTML document and remove all elements matching a CSS selector.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "document",
            "Type": "string",
            "Description": "The HTML document to parse.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "selector",
            "Type": "string",
            "Description": "A CSS selector that targets the elements that will be returned.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": null
      },
      {
        "Name": "htmlAddClass",
        "Alias": "",
        "Aliases": null,
        "Summary": "Parse a given HTML document and add a CSS class to all elements matching a CSS selector.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "document",
            "Type": "string",
            "Description": "The HTML document to parse.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "selector",
            "Type": "string",
            "Description": "A CSS selector that targets the elements that will be returned.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": null
      },
      {
        "Name": "htmlRemoveClass",
        "Alias": "",
        "Aliases": null,
        "Summary": "Parse a given HTML document and remove a CSS class to all elements matching a CSS selector.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "document",
            "Type": "string",
            "Description": "The HTML document to parse.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "selector",
            "Type": "string",
            "Description": "A CSS selector that targets the elements that will be returned.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": null
      },
      {
        "Name": "htmlSetAttr",
        "Alias": "",
        "Aliases": null,
        "Summary": "Parse a given HTML document and set an attribute to a given value on all elements matching a CSS selector.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "document",
            "Type": "string",
            "Description": "The HTML document to parse.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "selector",
            "Type": "string",
            "Description": "A CSS selector that targets the elements that will be returned.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "attribute",
            "Type": "string",
            "Description": "The name of the attribute to modify on matching elements.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "value",
            "Type": "any",
            "Description": "The value to set the matching attributes to.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": null
      },
      {
        "Name": "htmlAttrFindReplace",
        "Alias": "",
        "Aliases": null,
        "Summary": "Parse a given HTML document and locate a set of elements. For the given attribute name, perform a find and replace operation on the values.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "document",
            "Type": "string",
            "Description": "The HTML document to parse.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "selector",
            "Type": "string",
            "Description": "A CSS selector that targets the elements that will be modified.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "attribute",
            "Type": "string",
            "Description": "The name of the attribute to modify on matching elements.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "find",
            "Type": "string",
            "Description": "A regular expression that will be used to find matching text in the affected attributes.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "replace",
            "Type": "string",
            "Description": "The value that will replace any found text.  Capture groups in the regular expression can be referenced using a \"$\", e.g.: ${1}, ${2}, ${name}.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": null
      },
      {
        "Name": "htmlTextFindReplace",
        "Alias": "",
        "Aliases": null,
        "Summary": "Parse a given HTML document and locate a set of elements. For each matched element, perform a find and replace operation on the text content of the element (including all descendants).",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "document",
            "Type": "string",
            "Description": "The HTML document to parse.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "selector",
            "Type": "string",
            "Description": "A CSS selector that targets the elements that will be modified.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "find",
            "Type": "string",
            "Description": "A regular expression that will be used to find matching text in the affected attributes.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "replace",
            "Type": "string",
            "Description": "The value that will replace any found text.  Capture groups in the regular expression can be referenced using a \"$\", e.g.: ${1}, ${2}, ${name}.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": null
      },
      {
        "Name": "htmlquery",
        "Alias": "htmlQuery",
        "Aliases": null,
        "Summary": "",
        "Returns": "",
        "Hidden": true,
        "Arguments": null,
        "Examples": null
      }
    ],
    "Skip": false
  },
  {
    "Name": "Color Manipulation",
    "Description": "Used to parse, manipulate, and adjust string representations of visible colors.",
    "Functions": [
      {
        "Name": "lighten",
        "Alias": "",
        "Aliases": null,
        "Summary": "Lighten the given color by a percent [0-100].",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "color",
            "Type": "string",
            "Description": "The base color to operate on.  Can be specified as rgb(), rgba(), hsl(), hsla(), hsv(), hsva(), \"#RRGGBB\", or \"#RRGGBBAA\".",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "percent",
            "Type": "number",
            "Description": "A how much lighter the color should be made.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "lighten \"#FF0000\" 15",
            "Description": "",
            "Return": "#FF4D4D"
          }
        ]
      },
      {
        "Name": "darken",
        "Alias": "",
        "Aliases": null,
        "Summary": "Darken the given color by a percent [0-100].",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "color",
            "Type": "string",
            "Description": "The base color to operate on.  Can be specified as rgb(), rgba(), hsl(), hsla(), hsv(), hsva(), \"#RRGGBB\", or \"#RRGGBBAA\".",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "percent",
            "Type": "number",
            "Description": "A how much darker the color should be made.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "darken \"#FF0000\" 15",
            "Description": "",
            "Return": "#B30000"
          }
        ]
      },
      {
        "Name": "colorToHex",
        "Alias": "",
        "Aliases": null,
        "Summary": "Convert the given color to a hexadecimal (\"#RRGGBB\", \"#RRGGBBAA\") value.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "color",
            "Type": "string",
            "Description": "The color to convert.  Can be specified as rgb(), rgba(), hsl(), hsla(), hsv(), hsva(), \"#RRGGBB\", or \"#RRGGBBAA\".",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "colorToHex \"hsl(0, 100%, 50%)\"",
            "Description": "",
            "Return": "#FF0000"
          }
        ]
      },
      {
        "Name": "colorToRGB",
        "Alias": "",
        "Aliases": null,
        "Summary": "Convert the given color to an \"rgb()\" or \"rgba()\" value.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "color",
            "Type": "string",
            "Description": "The color to convert.  Can be specified as rgb(), rgba(), hsl(), hsla(), hsv(), hsva(), \"#RRGGBB\", or \"#RRGGBBAA\".",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "colorToHex \"#FF0000\"",
            "Description": "",
            "Return": "rgb(255, 0, 0)"
          }
        ]
      },
      {
        "Name": "colorToHSL",
        "Alias": "",
        "Aliases": null,
        "Summary": "Convert the given color to an \"hsl()\" or \"hsla()\" value.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "color",
            "Type": "string",
            "Description": "The color to convert.  Can be specified as rgb(), rgba(), hsl(), hsla(), hsv(), hsva(), \"#RRGGBB\", or \"#RRGGBBAA\".",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "colorToHex \"#FF0000\"",
            "Description": "",
            "Return": "hsl(0, 100%, 50%)"
          }
        ]
      },
      {
        "Name": "colorFromValue",
        "Alias": "",
        "Aliases": null,
        "Summary": "Consistently generate the same color from a given value of any type. This can be useful for providing automatically generated colors to represent data for which a set of predefined colors may not have significant meaning (for example: user avatars and contact lists).",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "value",
            "Type": "any",
            "Description": "A value to generate a color for.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "colorFromValue \"Alice\"",
            "Description": "",
            "Return": "#416C69"
          }
        ]
      }
    ],
    "Skip": false
  },
  {
    "Name": "Unit Conversions",
    "Description": "Used to convert numeric values between different unit systems.",
    "Functions": [
      {
        "Name": "convert",
        "Alias": "",
        "Aliases": null,
        "Summary": "A generic unit conversion function that allows for units to be specified by value as strings.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      }
    ],
    "Skip": false
  },
  {
    "Name": "Introspection and Reflection",
    "Description": "Functions for inspecting runtime information about templates and Diecast itself.",
    "Functions": [
      {
        "Name": "templateKey",
        "Alias": "",
        "Aliases": null,
        "Summary": "Open the given file and retrieve the key from the page object defined in its header.",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      }
    ],
    "Skip": false
  },
  {
    "Name": "Comparison Functions",
    "Description": "Used for comparing two values, or for returning one of many options based on a given condition.",
    "Functions": [
      {
        "Name": "eqx",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return whether two values are equal (any type).",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "left",
            "Type": "any",
            "Description": "The first value.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "right",
            "Type": "any",
            "Description": "The second value.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "eqx \"1\" \"1\"",
            "Description": "",
            "Return": true
          },
          {
            "Code": "eqx \"1\" \"2\"",
            "Description": "",
            "Return": false
          },
          {
            "Code": "eqx \"1\" 1",
            "Description": "",
            "Return": true
          },
          {
            "Code": "eqx 1 1.0",
            "Description": "",
            "Return": true
          },
          {
            "Code": "eqx \"1\" 2",
            "Description": "",
            "Return": false
          }
        ]
      },
      {
        "Name": "nex",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return whether two values are not equal (any type).",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "left",
            "Type": "any",
            "Description": "The first value.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "right",
            "Type": "any",
            "Description": "The second value.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "nex \"1\" \"1\"",
            "Description": "",
            "Return": false
          },
          {
            "Code": "nex \"1\" \"2\"",
            "Description": "",
            "Return": true
          },
          {
            "Code": "nex \"1\" 1",
            "Description": "",
            "Return": false
          },
          {
            "Code": "nex 1 1.0",
            "Description": "",
            "Return": false
          },
          {
            "Code": "nex \"1\" 2",
            "Description": "",
            "Return": true
          }
        ]
      },
      {
        "Name": "gtx",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return whether the first value is numerically or lexically greater than the second.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "left",
            "Type": "any",
            "Description": "The first value.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "right",
            "Type": "any",
            "Description": "The second value.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": null
      },
      {
        "Name": "gex",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return whether the first value is numerically or lexically greater than or equal to the second.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "left",
            "Type": "any",
            "Description": "The first value.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "right",
            "Type": "any",
            "Description": "The second value.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": null
      },
      {
        "Name": "ltx",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return whether the first value is numerically or lexically less than the second.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "left",
            "Type": "any",
            "Description": "The first value.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "right",
            "Type": "any",
            "Description": "The second value.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": null
      },
      {
        "Name": "lex",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return whether the first value is numerically or lexically less than or equal to the second.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "left",
            "Type": "any",
            "Description": "The first value.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "right",
            "Type": "any",
            "Description": "The second value.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": null
      },
      {
        "Name": "compare",
        "Alias": "",
        "Aliases": null,
        "Summary": "A generic comparison function. Accepts operators: \"gt\", \"ge\", \"lt\", \"le\", \"eq\", \"ne\"",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "operator",
            "Type": "string",
            "Description": "The type of compare operation being performed.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "left",
            "Type": "any",
            "Description": "The first value.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "right",
            "Type": "any",
            "Description": "The second value.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": null
      },
      {
        "Name": "match",
        "Alias": "",
        "Aliases": null,
        "Summary": "Return whether the given value matches the given regular expression.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "pattern",
            "Type": "string, array",
            "Description": "The regular expression to match with, or an array of regular expressions (any of which may match).",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "value",
            "Type": "string",
            "Description": "The value to match against.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": null
      },
      {
        "Name": "switch",
        "Alias": "",
        "Aliases": null,
        "Summary": "Provide a simple inline switch-case style decision mechanism.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "input",
            "Type": "any",
            "Description": "The value being tested.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "fallback",
            "Type": "any",
            "Description": "The \"default\" value if none of the subsequent conditions match.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "criteria",
            "Type": "array[if, then]",
            "Description": "An array of values representing possible values of _input_, and the value to return if input matches. Arguments are consumed as an array of value-result pairs.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "switch \"yellow\" \"danger\" \"yellow\" \"warning\" \"green\" \"success\" \"blue\" \"info\"",
            "Description": "",
            "Return": "warning"
          },
          {
            "Code": "switch \"green\" \"danger\" \"yellow\" \"warning\" \"green\" \"success\" \"blue\" \"info\"",
            "Description": "",
            "Return": "success"
          },
          {
            "Code": "switch \"blue\" \"danger\" \"yellow\" \"warning\" \"green\" \"success\" \"blue\" \"info\"",
            "Description": "",
            "Return": "info"
          },
          {
            "Code": "switch \"red\" \"danger\" \"yellow\" \"warning\" \"green\" \"success\" \"blue\" \"info\"",
            "Description": "",
            "Return": "danger"
          },
          {
            "Code": "switch \"potato\" \"danger\" \"yellow\" \"warning\" \"green\" \"success\" \"blue\" \"info\"",
            "Description": "",
            "Return": "danger"
          }
        ]
      }
    ],
    "Skip": false
  },
  {
    "Name": "Dynamic Variables",
    "Description": "A set of functions that allow for custom data to be set, retrieved, and removed at runtime; providing greater flexibility over standard template variables. All variables created or modified using these functions are accessible under the global _$.vars_ object.  For example, a variable set with \u003ccode\u003e{{ var \"test\" 123 }}\u003c/code\u003e would be retrieved with \u003ccode\u003e{{ $.vars.test }}\u003c/code\u003e, which would contain the integer value _123_.",
    "Functions": [
      {
        "Name": "var",
        "Alias": "",
        "Aliases": null,
        "Summary": "Declare a new variable with a given name, optionally setting it to an initial value.  If a value is not provided, the variable is set to a null (empty) value. You can use this behavior to clear out the value of an existing variable. The string defining the variable name is interpreted as a \"dot.separated.path\" that can be used to set the value in a deeply-nested objects.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "name",
            "Type": "string",
            "Description": "The name of the variable to declare or set.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "value",
            "Type": "any",
            "Description": "If specified, the value at _$.vars.NAME_ will be set to the given value.  Otherwise, it will be set to _null_.",
            "Variadic": false,
            "Optional": true,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "var \"test\"",
            "Description": "",
            "Return": null
          },
          {
            "Code": "var \"test\" \"Hello\"",
            "Description": "",
            "Return": "Hello"
          },
          {
            "Code": "var \"this.is.a.value\" true",
            "Description": "",
            "Return": {
              "this": {
                "is": {
                  "a": {
                    "value": true
                  }
                }
              }
            }
          }
        ]
      },
      {
        "Name": "push",
        "Alias": "",
        "Aliases": null,
        "Summary": "Append a value to an array residing at the named variable.  If the current value is nil, or the variable does not exist, the variable will be created as an array containing the provided value.If the current value exists but is not already an array, it will first be converted to one, to which the given value will be appended.",
        "Returns": "",
        "Hidden": false,
        "Arguments": [
          {
            "Name": "name",
            "Type": "string",
            "Description": "The name of the variable to append to.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          },
          {
            "Name": "value",
            "Type": "any",
            "Description": "The value to append.",
            "Variadic": false,
            "Optional": false,
            "Default": null,
            "Valid": null
          }
        ],
        "Examples": [
          {
            "Code": "push \"test\" 123",
            "Description": "",
            "Return": [
              123
            ]
          },
          {
            "Code": "push \"test\" 456",
            "Description": "",
            "Return": [
              123,
              456
            ]
          },
          {
            "Code": "push \"users.names\" \"Bob\"",
            "Description": "",
            "Return": {
              "users": {
                "names": [
                  "Alice",
                  "Bob"
                ]
              }
            }
          }
        ]
      },
      {
        "Name": "pop",
        "Alias": "",
        "Aliases": null,
        "Summary": "",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "varset",
        "Alias": "",
        "Aliases": null,
        "Summary": "",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "increment",
        "Alias": "",
        "Aliases": null,
        "Summary": "",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "incrementByValue",
        "Alias": "",
        "Aliases": null,
        "Summary": "",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      }
    ],
    "Skip": false
  },
  {
    "Name": "HTTP Request Details",
    "Description": "These functions provide access to information contained in the original HTTP client request that led to the current template being processed.  These functions are useful for allowing user-specified data to drive how the output is generated.",
    "Functions": [
      {
        "Name": "payload",
        "Alias": "",
        "Aliases": null,
        "Summary": "",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "querystrings",
        "Alias": "",
        "Aliases": null,
        "Summary": "",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "qs",
        "Alias": "",
        "Aliases": null,
        "Summary": "",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "headers",
        "Alias": "",
        "Aliases": null,
        "Summary": "",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "param",
        "Alias": "",
        "Aliases": null,
        "Summary": "",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      },
      {
        "Name": "read",
        "Alias": "",
        "Aliases": null,
        "Summary": "",
        "Returns": "",
        "Hidden": false,
        "Arguments": null,
        "Examples": null
      }
    ],
    "Skip": false
  }
]